/**
\author Klaus Zenker (HZDR)
\version @watchdog-server_VERSION@
\mainpage Watchdog Server
The watchdog contains five main moudles:
  - system: Monitors system paramters
  - processes: Start/stop and monitor a process
  - watchdog: Watchdog paramters
  - filesystem: Filesystem information for all hard drives (disk usage,...)
  - network: Network statistics for all network adapters
  
Optional modules are:
  - history: A server based history of selected process variables
  - microDAQ: DAQ module writing selected data to hdf5 files 

System parameter are read directly from \c /proc/\%PID%/cpuinfo and \c   /sys/devices/system/cpu/present.
Information about processes are also taken from \c /proc/ using the \c proc library. 
The number of proceeses to be controlled by the watchdog has to be set in the configuration file \c WatchdogServerConfig.xml, where also 
the optional modules can be added.

\code
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
  <variable name="enableMicroDAQ" type="int32" value="0" />
  <variable name="enableServerHistory" type="uint32" value="0" />
  <variable name="serverHistoryLength" type="int32" value="1200" />
  <variable name="numberOfProcesses" type="uint32" value="1" />
</configuration>
\endcode

On the server the following substructure for each process will appear:

  - enableProcess
  - subfolder: statistics &rarr; Process statistcs filled when the process is running
  - subfolder: config     &rarr; Process configuration
  - subfolder: status     &rarr; Process information like errors, PID, ... 

To setup a process the following minimum configuration has to be done:
  -# \c config/path
  -# \c config/command
  -# \c enableProcess &rarr; set 1 to start the process 
  
Here \c command can also include arguments to be passed to the program. If \c enableProcess is set true a new
process is created using \c fork in combination with \c execv. A detailed documentation is given in 
the documentation of the class ProcessHandler, which is used for the process control. If starting the process fails
the server will retry to start the process (\c config/maxFails controls how often restarts are tried and \c status/nFailed indicates the number of fails).
In order to try again one has to set enableProcess to flase and true again. If the process terminates 
 the watchdog restarts the process. The number of restarts is counted (\c config/nRestarts) and the maximum allowed
number of resets can be set by the user (\c config/maxRestarts).

It might happen that a started process also starts child processes. The number of processes started is given in the control
system (\c status/nChilds). All process statistics are shown for the first child process. If you want to see the statistics for 
another child process increase the paramter \c config/pidOffset (0 for the first process) according to the number of total child
processes.

In the control system the processes are identified by the dicetory number, which might not be convinient. For process
identification the user can set a process alias using \c config/alias. This allows to write more generic client applications, which
do not include process names encoded in the process variable name.  

\remark 
For each process a link in the proc directory is created! Thus one can access the path \c /proc/self/ without knowing the 
PID of the process. This might be useful in some cases...

\remark 
Since boost version 1.64 a new tool kit is available: boost.process. It can be used to spawn processes without using system calls like
fork/exec. Check if it is more useful compared to the current implementation. It is not used so far, since it is not available in 
Ubuntu 16.04.
*/